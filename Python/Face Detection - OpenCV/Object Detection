#!/usr/bin/env python
# coding: utf-8

# In[1]:


import cv2
import numpy as np
import os
from datetime import datetime
itemList=[]


# In[2]:


# Load Yolo
print("LOADING YOLO")
net = cv2.dnn.readNet(r"/data/container_dir/Anu/model_training/backup/yolov3_custom_last.weights", r"/data/container_dir/Anu/model_training/darknet/cfg/yolov3_custom.cfg")
#save all the names in file o the list classes
classes = []
with open("/data/container_dir/Anu/model_training/custom_data/classes.names", "r") as f:
    classes = [line.strip() for line in f.readlines()]
#get layers of the network
layer_names = net.getLayerNames()
print("layer_names",str(layer_names))
#Determine the output layer names from the YOLO model 
output_layers = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]
print("output_layers",str(output_layers))
print("YOLO LOADED")


# In[ ]:


#Fetch videos from the input
path = r"/data/container_dir/Anu/videos"
os.chdir(path)
for file in os.listdir():
    # Check whether file is in mp3 format or not
    if file.endswith(".mp4"):
        file_path = f"{path}/{file}"
        print(file_path)
        video_capture = cv2.VideoCapture(file)
        print(video_capture)
        print("Started processing video : " + file + " at " + str(datetime.now().time())) 
        try:
            while True:
                # Capture frame-by-frame
                re,img = video_capture.read()
                print("capture frame-by-frame")
                img = cv2.resize(img, None, fx=0.4, fy=0.4)
                height, width, channels = img.shape
                print("height, width, channels")
                # USing blob function of opencv to preprocess image
                blob = cv2.dnn.blobFromImage(img, 1 / 255.0, (416, 416),swapRB=True, crop=False)
                print("blob")
                #Detecting objects
                net.setInput(blob)
                print("net")
                outs = net.forward(output_layers)
                print("outs")
                # Showing informations on the screen
                class_ids = []
                confidences = []
                boxes = []
                for out in outs:
                    for detection in out:
                        scores = detection[5:]
                        class_id = np.argmax(scores)
                        confidence = scores[class_id]
                        if confidence > 0.9:
                            # Object detected
                            center_x = int(detection[0] * width)
                            center_y = int(detection[1] * height)
                            w = int(detection[2] * width)
                            h = int(detection[3] * height)
                            # Rectangle coordinates
                            x = int(center_x - w / 2)
                            y = int(center_y - h / 2)
                            boxes.append([x, y, w, h])
                            confidences.append(float(confidence))
                            class_ids.append(class_id)
                #We use NMS function in opencv to perform Non-maximum Suppression
                #we give it score threshold and nms threshold as arguments.
                indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)
                font = cv2.FONT_HERSHEY_PLAIN
                colors = np.random.uniform(0, 255, size=(len(classes), 3))
                for i in range(len(boxes)):
                    if i in indexes:
                        x, y, w, h = boxes[i]
                        label = str(classes[class_ids[i]])
                        itemList.append(str(label)) 
                cv2.imshow("Image",cv2.resize(img, (800,600)))
                if cv2.waitKey(1) & 0xFF == ord('q'):
                     break
        except:
            print ("video ended and no more frames to process")
        video_capture.release()
        cv2.destroyAllWindows()
        #convert list to Set to remove dupicates
        uniqueitems=set(itemList)
        #Add unique items to a text file
        os.path.splitext(file)[0]
        with open(os.path.splitext(file)[0]+'.'+'txt', 'w') as filehandle:
            itr = 1
            for listitem in uniqueitems:
                filehandle.write('{item}\n'.format(item = listitem))
                itr =itr + 1
        print("Completed processing video : " + file + " at " + str(datetime.now().time()))


# In[ ]:




